
org 100h

section .data

section .data
    xPos dw 160     ; Initial x position
    yPos dw 100     ; Initial y position
    xVelocity dw 1  ; Initial x velocity
    yVelocity dw 0  ; Initial y velocity



    Pacman db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF
           db 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF
           db 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2C, 0x2C, 0x2C, 0x2C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
           db 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

section .text

mov ax, 0013h      ; Set Video Mode 4F02h (VBE mode 101h) - 640x480, 256 colors
int 10h

GameLoop:
    mov al, 0FFh
    call clearScreen
    call wait_key_loop

    ; Check for keypress
    mov ah, 01h
    int 16h

; AH = 0 if no key pressed, AH = ASCII code if key pressed
jz NoKeyPress

; Check for key and update position

wait_key_loop:
       cmp ah, 48h
       je MoveUp
       cmp ah, 50h
       je MoveDown
       cmp ah, 4Bh
       je MoveLeft
       cmp ah, 4Dh
       je MoveRight
       jne wait_key_loop

NoKeyPress:
    ; Update Pacman position based on velocity
    mov di, [yPos]      ; Use yPos for vertical position
    mov si, Pacman
    call printplayer

    mov bx, [xPos]
    add bx, [xVelocity]
    mov word [xPos], bx

    mov bx, [yPos]
    add bx, [yVelocity]
    mov word [yPos], bx

    ; Wait loop
    mov cx, 10000

    WaitLoop:
        loop WaitLoop

    ; Check boundaries and change velocity if necessary
    cmp word [xPos], 320-16
    je ChangeVelocityX
    cmp word [xPos], 0
    je ChangeVelocityX

    cmp word [yPos], 200-16
    je ChangeVelocityY
    cmp word [yPos], 0
    je ChangeVelocityY

    jmp GameLoop

MoveUp:
    add [yVelocity], 1
    jmp NoKeyPress

MoveDown:

    sub [yVelocity], 1
    jmp NoKeyPress

MoveLeft:
    sub [xVelocity], 1
    jmp NoKeyPress

MoveRight:
    add [xVelocity], 1
    jmp NoKeyPress

ChangeVelocityX:
    neg word [xVelocity]
    jmp GameLoop

ChangeVelocityY:
    neg word [yVelocity]
    jmp GameLoop

Exit:
    mov ax, 0C01h ; 
    int 21h

    ; DOS box default video mode
    mov ax, 03h 
    int 21h

    int 20h ; Quit





the_functions:

; need to set the color of filling in al
clearScreen:
mov ax, 0xA000
mov es, ax
mov di, 0
mov cx, 320*200
rep stosb
ret 

;printMaze:
;mov ax, 0xA000
;mov es, ax
;mov di, 48
;mov si, maze
;mov dx, 16
loopy5:
    mov cx, 16
    rep movsb
    add di, 640-16
    dec dx
    jnz loopy5
ret

printplayer:
 mov ax, 0xA000
 mov es, ax
 mov dx, 16

loopyy:
    mov cx, 16
    rep movsb
    add di, 320-16
    dec dx
    jnz loopyy
ret

ChangeVelocity:
neg word [xVelocity]
jmp GameLoop

