[org 0x100]

section .data

; Upper Left Corner
ULC    db 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x09, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 

; Upper Right Corner  
URC    db 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00 
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x09, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 

; Bottom Left Corner
BLC    db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x09, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09 

; Bottom Right Corner
BRC    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x09, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00 
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00

; Up Wall
UW     db 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 

; Left Wall
LW     db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00

; Right Wall
RW     db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09

; Bottom Wall
BW     db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09 
       db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
       db 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09

maze   dw ULC, UW, URC
       dw LW, 0, RW
       dw BLC, BW, BRC
       dw 0xFFFF       ; end of the tab

section .text

    ; Initialize graphic mode VGA 13h
    mov ax, 0x0013
    int 0x10

    mov ax, 0xA000
    mov es, ax

draw_maze:
    pusha
    mov bx, 0              
    mov dx, 0              

maze_loop:
    ; Check if we are at the end of the maze
    cmp word [maze + bx], 0xFFFF
    je end_maze

    ; Calculate the DI position for the current sprite
    mov ax, dx
    imul ax, 320           ; Each line has 320 bytes
    add ax, bx
    shr ax, 1              ; Divide by 2 because each maze entry is 2 bytes long
    imul ax, 8             ; Multiply by the width of the sprite
    mov di, ax

    ; Obtain the sprite address
    mov si, [maze + bx]
    test si, si            ; Check whether the sprite is non-zero
    jz skip_draw           ; Skip the drawing if it is a null sprite 
    call draw_sprite

    skip_draw:
    ; Move on to the next sprite in maze
    add bx, 2
    cmp bx, 16             ; Check if we have finished a line of sprite
    jl maze_loop
    add dx, 8              ; move to the next line
    mov bx, 0
    jmp maze_loop

end_maze:
    popa
    ret

    ; infinite loop
    jmp $

draw_sprite:
    pusha
    mov cx, 8           ; sprite Height

draw_line:
    push cx
    mov cx, 8           ; sprite width
    rep movsb           ; copy sprite line into video memory
    pop cx
    add di, 320-8       ; next line
    loop draw_line

    popa
    ret

end_program:
    mov ax, 0x0003
    int 0x10
    ret